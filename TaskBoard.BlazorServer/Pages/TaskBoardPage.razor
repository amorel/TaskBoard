@page "/taskboard"
@using Microsoft.Extensions.Logging
@using TaskBoard.BlazorServer.Services
@using TaskBoard.BlazorServer.ViewModels
@using TaskBoard.Domain.Enums
@inject ILogger<TaskBoardPage> Logger
@inject ITaskService TaskService

<div class="container-fluid">
    <h1>Task Board</h1>

    <div class="row">
        <div class="col-md-4">
            <TaskColumn Title="À faire" State="TaskState.Todo" Tasks="_todoTasks" OnTaskUpdated="RefreshTasks"
                OnTaskDeleted="RefreshTasks" OnAddTask="OpenCreateDialog" OnTaskMoved="HandleTaskMoved" />
        </div>

        <div class="col-md-4">
            <TaskColumn Title="En cours" State="TaskState.InProgress" Tasks="_inProgressTasks"
                OnTaskUpdated="RefreshTasks" OnTaskDeleted="RefreshTasks" OnAddTask="OpenCreateDialog"
                OnTaskMoved="HandleTaskMoved" />
        </div>

        <div class="col-md-4">
            <TaskColumn Title="Terminé" State="TaskState.Done" Tasks="_doneTasks" OnTaskUpdated="RefreshTasks"
                OnTaskDeleted="RefreshTasks" OnAddTask="OpenCreateDialog" OnTaskMoved="HandleTaskMoved" />
        </div>
    </div>
</div>

@if (_showCreateDialog)
{
    <TaskDialog TaskState="_newTaskState" OnClose="CloseCreateDialog" OnSave="CreateTask" />
}

@code {
    private TaskViewModel? _draggedTask;
    private List<TaskViewModel>? _todoTasks;
    private List<TaskViewModel>? _inProgressTasks;
    private List<TaskViewModel>? _doneTasks;
    private bool _showCreateDialog;
    private TaskState _newTaskState;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
        TaskService.OnChange += async () => await RefreshTasks();
    }

    private async Task RefreshTasks()
    {
        _todoTasks = (await TaskService.GetTasksByStateAsync(TaskState.Todo)).ToList();
        _inProgressTasks = (await TaskService.GetTasksByStateAsync(TaskState.InProgress)).ToList();
        _doneTasks = (await TaskService.GetTasksByStateAsync(TaskState.Done)).ToList();
        StateHasChanged();
    }

    private void OpenCreateDialog(TaskState state)
    {
        _newTaskState = state;
        _showCreateDialog = true;
    }

    private void CloseCreateDialog()
    {
        _showCreateDialog = false;
    }

    private async Task CreateTask(TaskViewModel task)
    {
        await TaskService.CreateTaskAsync(task);
        _showCreateDialog = false;
        await RefreshTasks();
    }

    private void HandleDragStart(TaskViewModel task)
    {
        _draggedTask = task;
    }

    private async Task HandleTaskMoved((TaskViewModel Task, TaskState NewState) moveData)
    {
        if (moveData.Task != null && moveData.Task.Status != moveData.NewState)
        {
            Logger.LogInformation($"Moving task: {moveData.Task.Title} from {moveData.Task.Status} to {moveData.NewState}");
            var updatedTask = new TaskViewModel
                {
                    Id = moveData.Task.Id,
                    Title = moveData.Task.Title,
                    Description = moveData.Task.Description,
                    Status = moveData.NewState,
                    CreatedAt = moveData.Task.CreatedAt,
                    LastModifiedAt = DateTime.UtcNow
                };

            try
            {
                await TaskService.UpdateTaskAsync(updatedTask);
                Logger.LogInformation("Task updated successfully");
                await RefreshTasks();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError($"Error updating task: {ex.Message}");
                Console.WriteLine($"Error updating task: {ex.Message}");
            }
        }
    }

    public void Dispose()
    {
        TaskService.OnChange -= StateHasChanged;
    }
}