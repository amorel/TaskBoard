@page "/taskboard"
@using TaskBoard.BlazorServer.Services
@using TaskBoard.BlazorServer.ViewModels
@using TaskBoard.Domain.Enums
@inject ITaskService TaskService

<div class="container-fluid">
    <h1>Task Board</h1>

    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <h5 class="card-title mb-0">À faire</h5>
                </div>
                <div class="card-body">
                    @if (_todoTasks != null)
                    {
                        @foreach (var task in _todoTasks)
                        {
                            <TaskCard Task="task" OnTaskUpdated="RefreshTasks" OnTaskDeleted="RefreshTasks" />
                        }
                    }
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary" @onclick="() => OpenCreateDialog(TaskState.Todo)">
                        + Ajouter une tâche
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">En cours</h5>
                </div>
                <div class="card-body">
                    @if (_inProgressTasks != null)
                    {
                        @foreach (var task in _inProgressTasks)
                        {
                            <TaskCard Task="task" OnTaskUpdated="RefreshTasks" OnTaskDeleted="RefreshTasks" />
                        }
                    }
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary" @onclick="() => OpenCreateDialog(TaskState.InProgress)">
                        + Ajouter une tâche
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Terminé</h5>
                </div>
                <div class="card-body">
                    @if (_doneTasks != null)
                    {
                        @foreach (var task in _doneTasks)
                        {
                            <TaskCard Task="task" OnTaskUpdated="RefreshTasks" OnTaskDeleted="RefreshTasks" />
                        }
                    }
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary" @onclick="() => OpenCreateDialog(TaskState.Done)">
                        + Ajouter une tâche
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (_showCreateDialog)
{
    <TaskDialog TaskState="_newTaskState" OnClose="CloseCreateDialog" OnSave="CreateTask" />
}

@code {
    private List<TaskViewModel>? _todoTasks;
    private List<TaskViewModel>? _inProgressTasks;
    private List<TaskViewModel>? _doneTasks;
    private bool _showCreateDialog;
    private TaskState _newTaskState;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
        TaskService.OnChange += async () => await RefreshTasks();
    }

    private async Task RefreshTasks()
    {
        _todoTasks = (await TaskService.GetTasksByStateAsync(TaskState.Todo)).ToList();
        _inProgressTasks = (await TaskService.GetTasksByStateAsync(TaskState.InProgress)).ToList();
        _doneTasks = (await TaskService.GetTasksByStateAsync(TaskState.Done)).ToList();
        StateHasChanged();
    }

    private void OpenCreateDialog(TaskState state)
    {
        _newTaskState = state;
        _showCreateDialog = true;
    }

    private void CloseCreateDialog()
    {
        _showCreateDialog = false;
    }

    private async Task CreateTask(TaskViewModel task)
    {
        await TaskService.CreateTaskAsync(task);
        _showCreateDialog = false;
        await RefreshTasks();
    }

    public void Dispose()
    {
        TaskService.OnChange -= StateHasChanged;
    }
}